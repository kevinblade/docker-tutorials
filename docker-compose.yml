version: '3.1'

services:
  neo4j:
    image: neo4j:3.5.2
    container_name: compose_neo4j
    restart: always
    networks:
      - mynetwork
    ports:
      - "7474:7474"
      - "7473:7473"
      - "7687:7687"
      - "2322:22"
    environment:
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,algo.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_shell_enabled=true
    volumes:
      - "/Volumes/Second_Disk/data/docker/neo4j/plugins:/plugins"
      - "/Volumes/Second_Disk/data/docker/neo4j/data:/data"
      - "/Volumes/Second_Disk/data/docker/neo4j/import:/import"
      - "/Volumes/Second_Disk/data/docker/neo4j/logs:/logs"

  redis:
    image: redis
    restart: always
    container_name: compose_redis
    networks:
      - mynetwork
  mongo:
    image: mongo
    container_name: compose_mongodb
    restart: always
    networks:
      - mynetwork
    ports:
      - '27017:27017'
    volumes:
      - 'mongodata:/data/db'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
  mongo-express:
    image: mongo-express
    container_name: compose_mongodb_express
    restart: always
    networks:
      - mynetwork
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password

volumes:
  mongodata:
    driver: local
    driver_opts:
      type: none
      device: /Volumes/Second_Disk/data/docker/mongodata/
      o: bind

networks:
  mynetwork:
    external: true
